{"ast":null,"code":"import React,{useContext,useEffect,useRef}from\"react\";import ContactContext from\"../../context/contact/contactContext\";var ContactFilter=function ContactFilter(){var contactContext=useContext(ContactContext);var text=useRef(\"\");var filterContacts=contactContext.filterContacts,clearFilter=contactContext.clearFilter,filtered=contactContext.filtered;useEffect(function(){if(filtered===null){text.current.value=\"\";}});var onChange=function onChange(e){if(text.current.value!==\"\"){filterContacts(e.target.value);}else{clearFilter();}};return React.createElement(\"form\",null,React.createElement(\"input\",{ref:text,type:\"text\",placeholder:\"Filter Contacts...\",onChange:onChange}));};export default ContactFilter;","map":{"version":3,"sources":["C:/Users/Julie/Desktop/contact-keeper/client/src/components/contacts/ContactFilter.js"],"names":["React","useContext","useEffect","useRef","ContactContext","ContactFilter","contactContext","text","filterContacts","clearFilter","filtered","current","value","onChange","e","target"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,SAA5B,CAAuCC,MAAvC,KAAqD,OAArD,CACA,MAAOC,CAAAA,cAAP,KAA2B,sCAA3B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMC,CAAAA,cAAc,CAAGL,UAAU,CAACG,cAAD,CAAjC,CACA,GAAMG,CAAAA,IAAI,CAAGJ,MAAM,CAAC,EAAD,CAAnB,CAF0B,GAIlBK,CAAAA,cAJkB,CAIwBF,cAJxB,CAIlBE,cAJkB,CAIFC,WAJE,CAIwBH,cAJxB,CAIFG,WAJE,CAIWC,QAJX,CAIwBJ,cAJxB,CAIWI,QAJX,CAM1BR,SAAS,CAAC,UAAM,CACd,GAAIQ,QAAQ,GAAK,IAAjB,CAAuB,CACrBH,IAAI,CAACI,OAAL,CAAaC,KAAb,CAAqB,EAArB,CACD,CACF,CAJQ,CAAT,CAMA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,CAAC,CAAI,CACpB,GAAIP,IAAI,CAACI,OAAL,CAAaC,KAAb,GAAuB,EAA3B,CAA+B,CAC7BJ,cAAc,CAACM,CAAC,CAACC,MAAF,CAASH,KAAV,CAAd,CACD,CAFD,IAEO,CACLH,WAAW,GACZ,CACF,CAND,CAQA,MACE,iCACE,6BACE,GAAG,CAAEF,IADP,CAEE,IAAI,CAAC,MAFP,CAGE,WAAW,CAAC,oBAHd,CAIE,QAAQ,CAAEM,QAJZ,EADF,CADF,CAUD,CA9BD,CA+BA,cAAeR,CAAAA,aAAf","sourcesContent":["import React, { useContext, useEffect, useRef } from \"react\";\r\nimport ContactContext from \"../../context/contact/contactContext\";\r\n\r\nconst ContactFilter = () => {\r\n  const contactContext = useContext(ContactContext);\r\n  const text = useRef(\"\");\r\n\r\n  const { filterContacts, clearFilter, filtered } = contactContext;\r\n\r\n  useEffect(() => {\r\n    if (filtered === null) {\r\n      text.current.value = \"\";\r\n    }\r\n  });\r\n\r\n  const onChange = e => {\r\n    if (text.current.value !== \"\") {\r\n      filterContacts(e.target.value);\r\n    } else {\r\n      clearFilter();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        ref={text}\r\n        type='text'\r\n        placeholder='Filter Contacts...'\r\n        onChange={onChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\nexport default ContactFilter;\r\n"]},"metadata":{},"sourceType":"module"}